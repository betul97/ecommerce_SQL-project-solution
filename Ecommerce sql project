UPDATE orders_dimen
SET Ord_ID =TRIM('Ord_' FROM Ord_ID)
UPDATE prod_dimen
SET Prod_ID =TRIM('Prod_' FROM Prod_ID)
UPDATE cust_dimen
SET Cust_ID =TRIM('Cust_' FROM Cust_ID)
UPDATE Shipping_Dimen
SET Ship_ID =TRIM('SHP_' FROM Ship_ID)
UPDATE Market_Fact2
SET Ord_ID =TRIM('Ord_' FROM Ord_ID)
UPDATE Market_Fact2
SET Cust_ID =TRIM('Cust_' FROM Cust_ID)
UPDATE Market_Fact2
SET Prod_ID =TRIM('Prod_' FROM Prod_ID)
UPDATE Market_Fact2
SET Ship_ID =TRIM('SHP_' FROM Ship_ID)
--------
SELECT *
FROM orders_dimen
SELECT *
FROM prod_dimen
SELECT *
FROM cust_dimen
SELECT *
FROM Shipping_Dimen
SELECT *
FROM Market_Fact2
ALTER TABLE orders_dimen DROP COLUMN column4
ALTER TABLE orders_dimen DROP COLUMN column5
ALTER TABLE prod_dimen DROP COLUMN column4
ALTER TABLE prod_dimen DROP COLUMN column5
ALTER TABLE Shipping_Dimen DROP COLUMN column5
-----1. Using the columns of “market_fact”, “cust_dimen”, “orders_dimen”, “prod_dimen”, 
-----“shipping_dimen”, Create a new table, named as “combined_table”.
 
SELECT B.*, C.*, D.*, E.Ship_Mode,E.Ship_Date,E.Ship_ID, A.Sales, A.Discount, A.Order_Quantity, A.Product_Base_Margin
INTO combined_table
FROM dbo.Market_Fact2 A,
dbo.cust_dimen B,
dbo.orders_dimen C,
dbo.prod_dimen D,
dbo.shipping_dimen E
WHERE A.Cust_ID = B.Cust_ID
AND A.Ord_ID = C.Ord_ID
AND A.Prod_ID = D.Prod_ID
AND A.Ship_ID = E.Ship_ID




------2. Find the top 3 customers who have the maximum count of orders.
--2. Find the top 3 customers who have the maximum count of orders.
--2. Maksimum sipariş sayısına sahip ilk 3 müşteriyi bulun.
select DISTINCT Cust_ID , Customer_Name,count(Ord_ID) OVER(PARTITION BY Cust_ID ) AS CNT_ORDER
from combined_table
order by CNT_ORDER DESC



-------3. Create a new column at combined_table as DaysTakenForShipping 
-----that contains the date difference of Order_Date and Ship_Date.

ALTER TABLE combined_table
ADD DaysTakenForShipping INT
UPDATE combined_table
SET DaysTakenForShipping =DATEDIFF(DAY,Order_Date,Ship_Date)



------4. Find the customer whose order took the maximum time to get shipping.

SELECT TOP(1) DaysTakenForShipping, Cust_ID,Customer_Name
FROM combined_table
ORDER BY DaysTakenForShipping DESC



------5. Count the total number of unique customers in January and
----- how many of them came back every month over the entire year in 2011

SELECT  DISTINCT YEAR(Order_Date) ord_year, MONTH(Order_Date) ord_month,
count(Cust_ID) OVER (PARTITION BY YEAR(Order_Date))
FROM combined_table
WHERE MONTH(Order_Date)=1
ORDER BY 2,1
---unique müşteri sayısı
---SELECT count(DISTINCT Cust_ID)
---FROM combined_table
-----6. Write a query to return for each user the time elapsed between the first purchasing and the third purchasing, in ascending order by Customer ID.
WITH T1 AS
(
SELECT  DISTINCT Cust_ID, Order_Date,
LEAD(Order_Date,2 )   OVER (PARTITION BY Cust_ID ORDER BY Order_date) AS DIFF_TIME
FROM combined_table
), T2 AS
(
SELECT DISTINCT Cust_ID,
DATEDIFF(DAY,Order_Date,DIFF_TIME) AS PREV_PASS_TIME
FROM T1
)
SELECT DISTINCT Cust_ID,
ISNULL(PREV_PASS_TIME, 0) AS PASS_TIME
FROM T2
ORDER BY 1


----7. Write a query that returns customers who purchased both product 11 and product 14, as well as the ratio of these 
-----products to the total number of products purchased by the customer.
SELECT DISTINCT Cust_ID
FROM  combined_table
WHERE Prod_ID = 11 
INTERSECT
SELECT DISTINCT Cust_ID
FROM  combined_table
WHERE Prod_ID = 14

SELECT*
FROM combined_table


-----Customer Segmentation
------1. Create a “view” that keeps visit logs of customers on a monthly basis. 
-----(For each log, three field is kept: Cust_id, Year, Month)

CREATE VIEW CUST_MONTH  AS
SELECT DISTINCT Cust_ID,YEAR(Order_Date),MONTH(Order_Date),
     DENSE_RANK() OVER (ORDER BY YEAR(Order_Date),MONTH(Order_Date)) order_month
FROM combined_table 

  
          


---2. Create a “view” that keeps the number of monthly visits by users. 
----(Show separately all months from the beginning business)

CREATE VIEW 
SELECT 
DISTINCT COUNT(Ord_ID) OVER (PARTITION BY MONTH(Order_Date)) AS number_of_monthly_visit
FROM combined_table;




-----3. For each visit of customers, 
-----create the next month of the visit as a separate column.

SELECT DISTINCT Cust_ID,
LEAD(MONTH(Order_Date)) OVER (PARTITION BY Cust_ID ORDER BY Ord_ID ) AS seperate_column
FROM combined_table;


-----4. Calculate the monthly time gap 
-----between two consecutive visits by each customer.
-------herbir müşterinin birbirini takip eden iki ziyareti arasındaki aylık zaman boşluğunu hesaplayın.

SELECT Cust_ID,MONTH(Order_Date)
    LEAD(Order_Date) OVER (PARTITION BY Cust_ID ORDER BY MONTH(Order_Date)) 
FROM combined_table
GROUP BY Cust_ID;

 
 SELECT *
 FROM combined_table




----5. Categorise customers using average time gaps. Choose the most fitted labeling model for you.
------For example:
---------o Labeled as churn if the customer hasn't made another purchase in the months since they made their first purchase.
-------------o Labeled as regular if the customer has made a purchase every month. Etc.
-----Ortalama zaman boşluklarını kullanarak müşterileri kategorilere ayırın. Size en uygun etiketleme modelini seçin.





-----Month-Wise Retention Rate
-----Find month-by-month customer retention ratei since the start of the business.
-------1. Find the number of customers retained month-wise. (You can use time gaps) 
-----ay bazında elde tutulan müşteri sayısını tutunuz.

SELECT DISTINCT Cust_ID,Order_Date,MONTH(Order_Date),
COUNT(Cust_ID) OVER (PARTITION BY Order_Date) AS count_of_customer
FROM combined_table
ORDER BY Cust_ID




---------2. Calculate the month-wise retention rate.
-----ay bazında elde tutma oranını hesaplayınız.

WITH T1 AS
(
     SELECT DISTINCT Cust_ID,YEAR(Order_Date) year_dat,MONTH(Order_Date) or_dat,
     LAST_VALUE(Order_Date) OVER (PARTITION BY Cust_ID ORDER BY MONTH(Order_DATE)) Last_date,
     FIRST_VALUE(Order_Date) OVER (PARTITION BY Cust_ID ORDER BY MONTH(Order_DATE)) First_date
     FROM combined_table
     ORDER BY 1,2
) T2 AS 
(
SELECT DISTINCT Cust_ID,T1.Last_date,T1first_date,Last_date-first_date AS differenc,
      (Last_date-first_date)/COUNT(Order_Date) AS retention_rate
FROM combined_table
)
